service: serverless-task-api

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  environment:
    TASKS_TABLE: ${self:service}-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Scan
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}"

functions:
  createTask:
    handler: src/handlers/createTask.handler
    events:
      - http:
          path: tasks
          method: post
  getTask:
    handler: src/handlers/getTask.handler
    events:
      - http:
          path: tasks/{id}
          method: get
  listTasks:
    handler: src/handlers/listTasks.handler
    events:
      - http:
          path: tasks
          method: get
  updateTask:
    handler: src/handlers/updateTask.handler
    events:
      - http:
          path: tasks/{id}
          method: put
  deleteTask:
    handler: src/handlers/deleteTask.handler
    events:
      - http:
          path: tasks/{id}
          method: delete

resources:
  Resources:
    TasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TASKS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-offline